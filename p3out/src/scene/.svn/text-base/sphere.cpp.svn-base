/**
 * @file sphere.cpp
 * @brief Function defnitions for the Sphere class.
 *
 * @author Kristin Siu (kasiu)
 * @author Eric Butler (edbutler)
 */

#include "scene/sphere.hpp"
#include "application/opengl.hpp"

namespace _462 {

#ifdef SOL_OGL
#define SPHERE_NUM_LAT 80
#define SPHERE_NUM_LON 100

#define SPHERE_NUM_VERTICES ( ( SPHERE_NUM_LAT + 1 ) * ( SPHERE_NUM_LON + 1 ) )
#define SPHERE_NUM_INDICES ( 6 * SPHERE_NUM_LAT * SPHERE_NUM_LON )
// index of the x,y sphere where x is lat and y is lon
#define SINDEX(x,y) ((x) * (SPHERE_NUM_LON + 1) + (y))
#define VERTEX_SIZE 8
#define TCOORD_OFFSET 0
#define NORMAL_OFFSET 2
#define VERTEX_OFFSET 5

static unsigned int Indices[SPHERE_NUM_INDICES];
static float Vertices[VERTEX_SIZE * SPHERE_NUM_VERTICES];

static void init_sphere()
{
    static bool initialized = false;
    if ( initialized )
        return;

    for ( int i = 0; i <= SPHERE_NUM_LAT; i++ ) {
        for ( int j = 0; j <= SPHERE_NUM_LON; j++ ) {
            real_t lat = real_t( i ) / SPHERE_NUM_LAT;
            real_t lon = real_t( j ) / SPHERE_NUM_LON;
            float* vptr = &Vertices[VERTEX_SIZE * SINDEX(i,j)];

            vptr[TCOORD_OFFSET + 0] = lon;
            vptr[TCOORD_OFFSET + 1] = 1-lat;

            lat *= PI;
            lon *= 2 * PI;
            real_t sinlat = sin( lat );

            vptr[NORMAL_OFFSET + 0] = vptr[VERTEX_OFFSET + 0] = sinlat * sin( lon );
            vptr[NORMAL_OFFSET + 1] = vptr[VERTEX_OFFSET + 1] = cos( lat ),
            vptr[NORMAL_OFFSET + 2] = vptr[VERTEX_OFFSET + 2] = sinlat * cos( lon );
        }
    }

    for ( int i = 0; i < SPHERE_NUM_LAT; i++ ) {
        for ( int j = 0; j < SPHERE_NUM_LON; j++ ) {
            unsigned int* iptr = &Indices[6 * ( SPHERE_NUM_LON * i + j )];

            unsigned int i00 = SINDEX(i,  j  );
            unsigned int i10 = SINDEX(i+1,j  );
            unsigned int i11 = SINDEX(i+1,j+1);
            unsigned int i01 = SINDEX(i,  j+1);

            iptr[0] = i00;
            iptr[1] = i10;
            iptr[2] = i11;
            iptr[3] = i11;
            iptr[4] = i01;
            iptr[5] = i00;
        }
    }

    initialized = true;
}
#endif /* SOL_OGL */

Sphere::Sphere()
    : radius(0), material(0) {}

Sphere::~Sphere() {}

#ifdef SOL_OGL
void Sphere::render() const
{
    // create geometry if we haven't already
    init_sphere();

    if ( material )
        material->set_gl_state();

    // just scale by radius and draw unit sphere
    glPushMatrix();
    glScaled( radius, radius, radius );
    glInterleavedArrays( GL_T2F_N3F_V3F, VERTEX_SIZE * sizeof Vertices[0], Vertices );
    glDrawElements( GL_TRIANGLES, SPHERE_NUM_INDICES, GL_UNSIGNED_INT, Indices );
    glPopMatrix();

    if ( material )
        material->reset_gl_state();
}
#endif /* SOL_OGL */

#ifdef SOLUTION
void Sphere::precompute()
{
    Matrix4 trans;
    make_inverse_transformation_matrix( &inv_trans, position, orientation, scale );
    make_transformation_matrix( &trans, position, orientation, scale );
    make_normal_matrix( &normal_mat, trans );

    // just widen by scale by widest point, it'll work no matter the orientation
    real_t sz = radius * 2.0 * std::max( scale.x, std::max( scale.y, scale.z ) );
    bounding_box = BoundingBox3::from_center_size( position, Vector3( sz, sz, sz ) );
}

void Sphere::test_intersection( const Ray& ray, IntersectionResult* res ) const
{
    Vector3 e = inv_trans.transform_point( ray.base );
    Vector3 d = inv_trans.transform_vector( ray.dir );

    // we now assume scale is identity
    real_t A = squared_length( d );
    real_t B = 2 * dot( d, e );
    real_t C = squared_length( e ) - radius * radius;

    real_t sol1, sol2;
    unsigned num_sol = quadratic_formula( A, B, C, &sol1, &sol2 );

    // if no solutions, then no intersection, else it's earliest solution
    real_t tmp;
    if ( num_sol == 0 ) {
        tmp = ray.maxt;
    } else {
        tmp = std::min( sol1, sol2 );
        if ( tmp < ray.mint )
            tmp = std::max( sol1, sol2 );
    }

    res->time = tmp;
    // cache normal
    res->position = e + d * tmp;
}

void Sphere::compute_color_data(
    const Vector3& point, const IntersectionResult& res, GeometryColorData* data ) const
{
    Vector3 normal = normalize( normal_mat * res.position );
    data->normal = normal;

    // if there's a texture, compute the texture coordinates
    if ( material->has_texture() ) {
        // compute the longitude and latitude to get tex coords
        data->tex_coord.x = fmod(atan2(normal.z, normal.x) / (2*PI) + 1, 1);
        data->tex_coord.y = asin(normal.y) / PI + .5;
    }
    data->material[0] = material;
    data->do_interpolate = false;
}
#endif /* SOLUTION */

} /* _462 */


/**
 * @file triangle.hpp
 * @brief Class definition for Triangle.
 *
 * @author Eric Butler (edbutler)
 */

#ifndef _462_SCENE_TRIANGLE_HPP_
#define _462_SCENE_TRIANGLE_HPP_

#include "scene/scene.hpp"

namespace _462 {

/**
 * a triangle geometry.
 * Triangles consist of 3 vertices. Each vertex has its own position, normal,
 * texture coordinate, and material. These should all be interpolated to get
 * values in the middle of the triangle.
 * These values are all in local space, so it must still be transformed by
 * the Geometry's position, orientation, and scale.
 */
class Triangle : public Geometry
{
public:

    struct Vertex
    {
        // note that position and normal are in local space
        Vector3 position;
        Vector3 normal;
        Vector2 tex_coord;
        const Material* material;
    };

    // the triangle's vertices, in CCW order
    Vertex vertices[3];

    Triangle();
    virtual ~Triangle();
#ifdef SOL_OGL
    virtual void render() const;
#endif /* SOL_OGL */
#ifdef SOLUTION
    struct {
        Vector3 position;
        Vector3 normal;
    } world_vertices[3];

    virtual void precompute();
    virtual void test_intersection( const Ray& ray, IntersectionResult* res ) const;
    virtual void compute_color_data(
        const Vector3& point, const IntersectionResult& res, GeometryColorData* data ) const;
#endif /* SOLUTION */

};

#ifdef SOLUTION
struct TriangleData
{
    /// Triangle vertex a
    Vector3 a;
    /// Triangle vertex a - vertex b
    Vector3 amb;
    /// Triangle vertex a - vertex c
    Vector3 amc;
};

/**
 * Check for triangle intersection.
 * @return true if there was an intersection
 */
bool triangle_intersect_test( const Ray& ray, const TriangleData& tri, IntersectionResult* res );
#endif /* SOLUTION */

} /* _462 */

#endif /* _462_SCENE_TRIANGLE_HPP_ */

